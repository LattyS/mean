{"_id":"mongoose-sequence","_rev":"11-d240895c3fac7507eb1f31bca0248bcb","name":"mongoose-sequence","time":{"modified":"2016-03-12T12:41:42.166Z","created":"2015-09-27T20:29:30.709Z","0.1.0":"2015-09-27T20:29:30.709Z","0.1.1":"2015-09-27T20:30:48.135Z","0.1.2":"2015-09-27T20:38:44.155Z","0.2.1":"2015-09-28T14:41:28.354Z","0.3.0":"2015-10-17T10:03:17.368Z","1.0.0":"2015-10-17T11:45:19.367Z","2.0.0":"2016-03-09T12:56:03.764Z","3.0.1":"2016-03-10T11:11:09.810Z","3.0.2":"2016-03-12T12:41:42.166Z"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"dist-tags":{"latest":"3.0.2"},"description":"Very generic autoincrement plugin for mongoose","readme":"# Mongoose sequence plugin\n\n[![Build Status](https://travis-ci.org/ramiel/mongoose-sequence.svg?branch=master)](https://travis-ci.org/ramiel/mongoose-sequence)\n[![Coverage Status](https://coveralls.io/repos/github/ramiel/mongoose-sequence/badge.svg?branch=master)](https://coveralls.io/github/ramiel/mongoose-sequence?branch=master)\n\nThis plugin let you create fields which autoincrement their value:  \n- every time a new document is inserted in a collection  \nor\n- when you esplicitly want to increment them\n\nThis increment can be:  \n- __global__: every document has a unique value for the sequence field\n- __scoped__: the counter depends on the value of other field(s)\n\nMultiple counter can be set for a collection.\n\n## Requisites\n\nThis plugin need mongoose version 4.0.0 or above\n\n## Installation\n\n`npm install --save mongoose-sequence`\n\n## Global sequences\n\nLet's say you want to have an `id` field in your `user` collection which has an unique auto-incremented value.\n\nThe user schema is something like this:\n\n```js\nUserSchema = mongoose.Schema({\n    name: String\n});\n\nmongoose.model('User', UserSchema);\n```\n\nYou don't need to define the `id` field in your schema because the plugin automatically set it for you. The only thing you have to do is to call:\n\n```js\nUserSchema.plugin(AutoIncrement, {inc_field: 'id'});\n```\n\nEvery time a new user is created, the `id` field will have an incremental number. The operation is atomic and is based on [this](http://docs.mongodb.org/manual/tutorial/create-an-auto-incrementing-field/) specification.\nA commodity collection named `counters` is created for you. You can override the name of this collection but we will see this later with the `options`.\n\nIf you want to increment the `_id` field which is special to mongoose, you have to explicitly specify it as a Number and tell mongoose to not interfer:\n\n```js\nUserSchema = mongoose.Schema({\n    _id: Number,\n    name: String\n}, { _id: false });\nUserSchema.plugin(AutoIncrement);\n```\n\nIn this case you don't have to specify `inc_field` because the default value is `_id`\n\n## Not automatic sequences \n\nLet say our user model has a `rank` field which cgives the rank of the user in a tournament. So it saves the arrival order of a user to the end of our amazing game. This field is of course a sequence but has to be incremented everytime an event occours. Because we have concurrent access to database we want to be sure that the increment of this counter happens safely.\nLet's start modify our schema\n\n```js\nUserSchema = mongoose.Schema({\n    name: String,\n    rank: Number\n});\n```\n\nthis time we specified explicitly the field `rank`. There is no difference between defining and omitting the field specification. The only constraints is that the field has to be of type `Number`, otherwise the plugin will raise an error.\nSo, let's say to the plugin we want the `rank` field to be a safe counter\n\n```js\nUserSchema.plugin(AutoIncrement, {inc_field: 'rank', disable_hooks: true});\n```\n\nWe specified `disable_hooks`. This avoid the field to be incremented when a new document is saved. So, how to increment this field? Your models have a new method: **setNext**. You must specify which sequence you want to increment and a callback. Here an example:\n\n```js\nUser.findOne({name:'George'}, function(err, user){\n    user.setNext('rank', function(err, user){\n        if(err) console.log('Cannot increment the rank because',err);\n    });\n});\n```\n\nYou noticed that the method `setNext` takes, as argument, the counter field name. Is possible to give a name to the counter and use it as reference. For the previous example we can define the counter like this:\n\n```js\nUserSchema.plugin(AutoIncrement, {id:'rank_counter', inc_field: 'rank', disable_hooks: true});\n```\n\nand then using\n\n```js\nuser.setNext('rank_counter', function(err, user){\n    ...\n});\n```\n\nSo, if you not specify the `id`, the field name is used. Even if you're not forced to specify an id, its use is strongly suggested. This because if you have two different counters, which refers to fields with the same name, they will collide and incrementing one, will increment the other too. Counters are not bound to the schema they refer too, so two counters for two different schemas can collide.\nSo use unique id to be sure to avoid collision. In case of collision the plugin will raise an error.\n\nAs we will see, the use of an id for the counter is mandatory when you're are defining a `scoped counter`.\n\n**NOTE**: When you call `setNext` the document is automatically saved. This behavior has changed since version 3.0.0. If you use a prior version you have to call save by yourself.\n\n## Advanced\n\n### Scoped counters\n\nLet say our users are organized for `country` and `city`. And we want to save the `inhabitant_number` according to the two informations.  \nThe schema is like this:\n\n```js\nUserSchema = mongoose.Schema({\n    name: String,\n    country: String,\n    city: String,\n    inhabitant_number: Number\n});\n```\n\nEvery time a new Parisian is added the counting of Parisians have to be incremented. The inhabitants of New York must not interfer and have their separated counting. We should define a __scoped__ counter which increment the counter depending on the value of other fields.\n\n```js\nUserSchema.plugin(AutoIncrement, {id: 'inhabitant_seq', inc_field: 'inhabitant_number', reference_fields: ['country','city'] });\n```\n\nNotice that we have to use an id for our sequence, otherwise the plugin will raise an error.\nNow save a new user\n```js\nvar user = new User({\n    name: 'Patrice',\n    country: 'France',\n    city: 'Paris'\n});\nuser.save();\n```\n\nThis user will have the `inhabitant_number` counter to 1.\nIf now we add a new inhabitant from New York, this will have the counter to 1 also, because the counter is referred to the value of the fields `country` and `city`.\n\nIf we want to increment manually this counter we have to specify the id of the sequence in the `setNext` method\n\n```js\nuser.setNext('inhabitant_seq', function(err, user){\n    user.inhabitant_number; // the counter value\n});\n```\n\nOf course this example is a bit forced and this is for sure not the perfect use case. The field country and city have to be present and must not change during the life of the document because no automatic hook are set on the change of those values. But there are situations when you want a similar behavior.\n\n### Options\n\nThis plugin accept a series of options.\n\n- **inc_field**: The name of the field to increment. Mandatory, default is `_id`\n- **id**: Id of the sequence. Is mandatory only for scoped sequences but its use is strongly encouraged.\n- **reference_fields**: The field to reference for a scoped counter. Optional\n- **disable_hooks**: If true, the counter will not be incremented on saving a new document. Default to `false`\n- **collection_name**: By default the collection name to mantain the status of the counters is `counters`. You can override it using this option\n","versions":{"0.1.2":{"name":"mongoose-sequence","version":"0.1.2","description":"Very generic autoincrement plugin for mongoose","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"license":"GPL-2.0","dependencies":{"lodash":"^3.10.1"},"peerDependencies":{"mongoose":">=3"},"gitHead":"7bae1f905d9ba59a999c0ad94d65ec0c89b60cb3","bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","_id":"mongoose-sequence@0.1.2","_shasum":"197be8d6e64002656675c3eaab09b1f278a3acf5","_from":".","_npmVersion":"3.3.4","_nodeVersion":"4.1.1","_npmUser":{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"},"dist":{"shasum":"197be8d6e64002656675c3eaab09b1f278a3acf5","tarball":"https://registry.npmjs.org/mongoose-sequence/-/mongoose-sequence-0.1.2.tgz"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"directories":{}},"0.2.1":{"name":"mongoose-sequence","version":"0.2.1","description":"Very generic autoincrement plugin for mongoose","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"license":"GPL-2.0","dependencies":{"lodash":"^3.10.1"},"peerDependencies":{"mongoose":">=3"},"gitHead":"173bed440f0df820e740f60843a754c42bb41682","bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","_id":"mongoose-sequence@0.2.1","_shasum":"3d9f8053a9e6c9aa77d2101319b8cb03be6066cb","_from":".","_npmVersion":"3.3.4","_nodeVersion":"0.12.7","_npmUser":{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"},"dist":{"shasum":"3d9f8053a9e6c9aa77d2101319b8cb03be6066cb","tarball":"https://registry.npmjs.org/mongoose-sequence/-/mongoose-sequence-0.2.1.tgz"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"directories":{}},"0.3.0":{"name":"mongoose-sequence","version":"0.3.0","description":"Very generic autoincrement plugin for mongoose","main":"index.js","scripts":{"test":"./node_modules/mocha/bin/mocha"},"keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"license":"GPL-2.0","dependencies":{"lodash":"^3.10.1"},"peerDependencies":{"mongoose":">=3"},"devDependencies":{"async":"^1.4.2","chai":"^3.3.0","mocha":"^2.3.3","mongoose":"^4.1.11"},"gitHead":"19ae0cded5c4559396721135119936bb75c4a331","bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","_id":"mongoose-sequence@0.3.0","_shasum":"5d7232a70ff5b2988ee36e48aae8cee4b0608ccc","_from":".","_npmVersion":"3.3.4","_nodeVersion":"0.12.7","_npmUser":{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"},"dist":{"shasum":"5d7232a70ff5b2988ee36e48aae8cee4b0608ccc","tarball":"https://registry.npmjs.org/mongoose-sequence/-/mongoose-sequence-0.3.0.tgz"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"directories":{}},"1.0.0":{"name":"mongoose-sequence","version":"1.0.0","description":"Very generic autoincrement plugin for mongoose","main":"index.js","scripts":{"test":"./node_modules/mocha/bin/mocha"},"keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"license":"GPL-2.0","dependencies":{"lodash":"^3.10.1"},"peerDependencies":{"mongoose":">=3"},"devDependencies":{"async":"^1.4.2","chai":"^3.3.0","mocha":"^2.3.3","mongoose":"^4.1.11"},"gitHead":"f56bd747dc5238afe69519fd92c1c206c5a72c2d","bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","_id":"mongoose-sequence@1.0.0","_shasum":"97e31a39e30f8f9472cf88d0759762123783e2bb","_from":".","_npmVersion":"3.3.4","_nodeVersion":"0.12.7","_npmUser":{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"},"dist":{"shasum":"97e31a39e30f8f9472cf88d0759762123783e2bb","tarball":"https://registry.npmjs.org/mongoose-sequence/-/mongoose-sequence-1.0.0.tgz"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"directories":{}},"2.0.0":{"name":"mongoose-sequence","version":"2.0.0","description":"Very generic autoincrement plugin for mongoose","main":"index.js","scripts":{"test":"grunt test"},"keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"license":"GPL-2.0","dependencies":{"lodash":"^3.10.1"},"peerDependencies":{"mongoose":">=4"},"devDependencies":{"async":"^1.4.2","chai":"^3.3.0","grunt":"^0.4.5","grunt-eslint":"^18.0.0","grunt-mocha-cov":"^0.4.0","load-grunt-tasks":"^3.4.1","mocha":"^2.3.3","mongoose":"^4.1.11"},"config":{"blanket":{"pattern":["lib"],"data-cover-never":["node_modules","test"]}},"gitHead":"5f1679377fad9fba5994a9088c2ae4094a7c7fd5","bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","_id":"mongoose-sequence@2.0.0","_shasum":"9fdeb7ef15bbfa75a8d3181d19d05ba9f18b5a78","_from":".","_npmVersion":"3.7.3","_nodeVersion":"4.3.2","_npmUser":{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"},"dist":{"shasum":"9fdeb7ef15bbfa75a8d3181d19d05ba9f18b5a78","tarball":"https://registry.npmjs.org/mongoose-sequence/-/mongoose-sequence-2.0.0.tgz"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"_npmOperationalInternal":{"host":"packages-13-west.internal.npmjs.com","tmp":"tmp/mongoose-sequence-2.0.0.tgz_1457528159354_0.09101354633457959"},"directories":{}},"3.0.1":{"name":"mongoose-sequence","version":"3.0.1","description":"Very generic autoincrement plugin for mongoose","main":"index.js","scripts":{"test":"grunt test"},"keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"license":"GPL-2.0","dependencies":{"lodash":"^3.10.1"},"peerDependencies":{"mongoose":">=4"},"devDependencies":{"async":"^1.4.2","chai":"^3.3.0","grunt":"^0.4.5","grunt-eslint":"^18.0.0","grunt-mocha-cov":"^0.4.0","load-grunt-tasks":"^3.4.1","mocha":"^2.3.3","mongoose":"^4.1.11"},"config":{"blanket":{"pattern":["lib"],"data-cover-never":["node_modules","test"]}},"gitHead":"57621ab0ada4897a0e9d400b13046e75d26cbb7e","bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","_id":"mongoose-sequence@3.0.1","_shasum":"da4530b8154a974a9698a246e8b88ad8ad9bb443","_from":".","_npmVersion":"3.7.3","_nodeVersion":"4.3.2","_npmUser":{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"},"dist":{"shasum":"da4530b8154a974a9698a246e8b88ad8ad9bb443","tarball":"https://registry.npmjs.org/mongoose-sequence/-/mongoose-sequence-3.0.1.tgz"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mongoose-sequence-3.0.1.tgz_1457608267431_0.9493324290961027"},"directories":{}},"3.0.2":{"name":"mongoose-sequence","version":"3.0.2","description":"Very generic autoincrement plugin for mongoose","main":"index.js","scripts":{"test":"grunt test"},"keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"license":"GPL-2.0","dependencies":{"lodash":"^4.6.1"},"peerDependencies":{"mongoose":">=4"},"devDependencies":{"async":"^1.4.2","chai":"^3.3.0","grunt":"^0.4.5","grunt-eslint":"^18.0.0","grunt-mocha-cov":"^0.4.0","load-grunt-tasks":"^3.4.1","mocha":"^2.3.3","mongoose":"^4.1.11"},"config":{"blanket":{"pattern":["lib"],"data-cover-never":["node_modules","test"]}},"gitHead":"dc570b60edaaa8f9cc8b27f9d7dccf48c646b429","bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","_id":"mongoose-sequence@3.0.2","_shasum":"558fdad5c9f981495517abb9012c22c56d30b946","_from":".","_npmVersion":"3.7.3","_nodeVersion":"4.3.2","_npmUser":{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"},"dist":{"shasum":"558fdad5c9f981495517abb9012c22c56d30b946","tarball":"https://registry.npmjs.org/mongoose-sequence/-/mongoose-sequence-3.0.2.tgz"},"maintainers":[{"name":"ramiel","email":"fabrizio.ruggeri@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mongoose-sequence-3.0.2.tgz_1457786499817_0.8338905822020024"},"directories":{}}},"homepage":"https://github.com/ramiel/mongoose-sequence#readme","keywords":["mongoose","autoincrement","sequence","seq"],"repository":{"type":"git","url":"git+https://github.com/ramiel/mongoose-sequence.git"},"author":{"name":"Fabrizio Ruggeri","email":"fabrizio.ruggeri@gmail.com","url":"http://www.ramielcreations.com/"},"bugs":{"url":"https://github.com/ramiel/mongoose-sequence/issues"},"license":"GPL-2.0","readmeFilename":"README.md","_attachments":{},"_etag":"\"3BH2H1HO5E1P70SQ84DH0LZ8L\""}